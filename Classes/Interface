--[[
    Interface       Trystan Cannon
                    19 June 2015

        Each interface is a graphical object
    with which users will interact. Because
    layers may require more than one interface,
    they will be contained with a table labeled
    'tInterfaces.'

        Layers are free to summon or hide any
    interfaces that they possess, making it
    possible for more than one interface to be
    on screen at any one time for the same layer.

        Each interface possesses its own 'Buffer'
    object to which it will draw any graphical
    data. This way, background information can be
    drawn without interrupting the user.
]]
--Main Entry Point--------------------------------
if not Buffer then
    -- Should probably make all classes accessible through
    -- the Layer API, so we don't have to know the file path.
    os.loadAPI("/Layers/Classes/Buffer")
end

local tInterfaceMetatable = { __index = getfenv() }
--isSummoned--------------------------------------
function isSummoned(self)
    return self.bIsSummoned
end
--summon------------------------------------------
function summon(self)
    self.bIsSummoned = true
end
--hide--------------------------------------------
function hide(self)
    self.bIsSummoned = false
end
--getBuffer---------------------------------------
function getBuffer(self)
    return self.tBuffer
end
--getGraphicalObjects-----------------------------
function getGraphicalObjects(self)
    return self.tGraphicalObjects
end
--addGraphicalObject------------------------------
function addGraphicalObject(self, tGraphicalObject, key)
    --if not getmetatable(getmetatable(tGraphicalObject)).__index == GraphicalObject then
    --    error("Cannot add a non-graphical object to this interface.")
    --    return
    --end

    if key then
        self.tGraphicalObjects[key] = tGraphicalObject
    else
        table.insert(self.tGraphicalObjects, tGraphicalObject)
    end
end
--update------------------------------------------
function update(self, ...)
    local tEventData = { ... }
    local sEventName = tEventData[1]

    -- Adjust any clicks for the graphical objects, so
    -- they receive the relative coordinates of the click.
    if sEventName == "mouse_click" or sEventName == "mouse_scroll" or
       sEventName == "mouse_drag"
    then
        -- The index in the event data table for the x and y coordinates
        -- of the click are always 3 and 4, respectively.
        local nAdjustedX, nAdjustedY = GraphicalObject.adjustClickForBuffer(tEventData[3], tEventData[4], self.tBuffer)

        tEventData[3] = nAdjustedX
        tEventData[4] = nAdjustedY
    end

    for _, tGraphicalObject in pairs(self.tGraphicalObjects) do
        tGraphicalObject:update(unpack(tEventData))
    end
end
--render------------------------------------------
function render(self)
    local tCurrentTerm = term.redirect(self.tBuffer:redirect())

    -- Render all of the graphical objects to the
    -- buffer, then render the buffer.
    for sKey, tGraphicalObject in pairs(self.tGraphicalObjects) do
        tGraphicalObject:render()
    end

    term.redirect(tCurrentTerm)
    self.tBuffer:render()
end
--new---------------------------------------------
--[[
    Creates and returns a new interface object.

    @constructor
]]
function new(nWidth, nHeight, x, y)
    return setmetatable({
        tBuffer           = Buffer.new(nWidth, nHeight, x, y, Layers.tBaseTerminal),
        tGraphicalObjects = {},

        bIsSummoned = false
    }, tInterfaceMetatable)
end
--------------------------------------------------