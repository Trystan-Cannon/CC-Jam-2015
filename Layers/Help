--[[
    Help            Trystan Cannon
                    19 June 2015

        The Help layer provides information about
    all currently running layers and is always active
    as long as the layers system is running.

        Specifically, the Help layer gives access to a simple
    'About' page as well as a list of all the currently
    running layers. With this list is all of the hotkeys that
    link to their respective layers.

    Hotkey:
        - Alt + H
]]
--Load APIs---------------------------------------
-- Load dependencies/parents.
if not Layer then
    os.loadAPI("/Layers/Classes/Layer")
end
if not Interface then
    os.loadAPI("/Layers/Classes/Interface")
end
if not Button then
    os.loadAPI("/Layers/Classes/Graphics/Button")
end
if not TextBox then
    os.loadAPI("/Layers/Classes/Graphics/TextBox")
end
if not ScrollPane then
    os.loadAPI("/Layers/Classes/Graphics/ScrollPane")
end

Layer.setChild(getfenv())
local tHelpMetatable = { __index = getfenv() }
--getCharFromKey----------------------------------
--[[
    Returns the character (element key) for the given
    key code.
]]
local function getCharFromKey(nKey)
    for sChar, nKeyCode in pairs(keys) do
        if nKeyCode == nKey then
            return sChar
        end
    end
end
--summon------------------------------------------
function summon(self)
    Layer.summon(self)
    self:update()
end
--hide--------------------------------------------
function hide(self)
    Layer.hide(self)
end
--update------------------------------------------
function update(self, ...)
    if not self:isSummoned() then
        return
    end

    self:getInterfaces().tMainInterface:update(...)
    self:getInterfaces().tMainInterface:render()
    
    if self.bShowAboutInterface then
        self:getInterfaces().tAboutInterface:update(...)
        self:getInterfaces().tAboutInterface:render()
    end
end
--new---------------------------------------------
function new()
    local self                  = setmetatable(Layer.new("Help", keys.h), tHelpMetatable)
    local tMainInterface        = Interface.new(25, 17, 1, 2)
    local tAboutInterface       = Interface.new(25, 15, Layers.SCREEN_WIDTH - 24, 3)
    local tAboutInterfaceBuffer = tAboutInterface:getBuffer()

    self.bShowAboutInterface = false

    --------------------------------------------------
    -- Initialize the main interface.
    tMainInterface:getBuffer():setBackgroundColor(colors.gray)
    tMainInterface:getBuffer():clear()

    -- Create graphical components for the main interface.
    local tHelpLayerTextBox  = TextBox.new(2, 2, nil, 1, "Help Layer", colors.white, colors.gray)
    local sAboutAccessLabel  = " About "
    local tAboutAccessButton = Button.new(tMainInterface:getBuffer().nWidth - sAboutAccessLabel:len() - 1, 2, sAboutAccessLabel:len(),
                                          3, sAboutAccessLabel, colors.white, colors.lightGray, true)

    tAboutAccessButton.act = function()
        -- If the about interface is going to be hidden, then
        -- we'll need to refresh the main buffer to hide it.
        if self.bShowAboutInterface then
            Layers.refreshScreen()
        end

        self.bShowAboutInterface = not self.bShowAboutInterface
    end

    -- Create a scroll pane in which all of the currently
    -- loaded layers exist.
    -- They each require their own text box.
    local tLayerTextBoxes = {}
    for nIndex, _ in pairs(fs.list(Layers.sLayersDirPath)) do
        table.insert(tLayerTextBoxes,
            TextBox.new(2, -1, nil, 1,
            function()
                -- This is bad design :(
                return " Alt + " .. getCharFromKey(Layers.tLayers[nIndex]:getHotkey()):upper() .. " -- " .. Layers.tLayers[nIndex]:getName()
            end
            , colors.white, colors.lightGray)
        )
    end

    local tLayersScrollPane = ScrollPane.new(2, 6, tMainInterface:getBuffer().nWidth - 2, 11, unpack(tLayerTextBoxes))
    --------------------------------------------------
    -- Initialize the about interface.
    tAboutInterfaceBuffer:setBackgroundColor(colors.gray)
    tAboutInterfaceBuffer:clear()

    -- Create text boxes for the about interface.
    local tAuthorTextBox      = TextBox.new(2, 2, nil, 1, "Author : Grim Reaper", colors.white, colors.gray)
    local tVersionTextBox     = TextBox.new(2, 3, nil, 1, "Version: 1.0", colors.white, colors.gray)
    local tCloseInfoTextBox   = TextBox.new(2, 4, nil, 1, "'Home' to close a Layer", colors.white, colors.gray)
    local tDescriptionTextBox = TextBox.new(2, 6, tAboutInterface:getBuffer().nWidth - 2, tAboutInterface:getBuffer().nHeight - 6,
        "    \"Layers\" is a simple system that creates a seemless integration of background \"widget\" like programs and the default shell of the user's choosing.",
    colors.white, colors.gray)
    --------------------------------------------------

    --[[
        TODO:
            + Make a list of currently loaded layers.
            + Have this list presented in some kind of scrollable pane.
    ]]

    --------------------------------------------------
    -- Add graphical components to the main interface.
    tMainInterface:addGraphicalObject(tHelpLayerTextBox, "tHelpLayerTextBox")
    tMainInterface:addGraphicalObject(tAboutAccessButton, "tAboutAccessButton")
    tMainInterface:addGraphicalObject(tLayersScrollPane, "tLayersScrollPane")
    --------------------------------------------------
    -- Add graphical components to the about interface.
    tAboutInterface:addGraphicalObject(tAuthorTextBox, "tAuthorTextBox")
    tAboutInterface:addGraphicalObject(tVersionTextBox, "tVersionTextBox")
    tAboutInterface:addGraphicalObject(tCloseInfoTextBox, "tCloseInfoTextBox")
    tAboutInterface:addGraphicalObject(tDescriptionTextBox, "tDescriptionTextBox")
    --------------------------------------------------
    -- Add interfaces to thelayer.
    self.tInterfaces.tMainInterface  = tMainInterface
    self.tInterfaces.tAboutInterface = tAboutInterface

    return self
end
--Main Entry Point--------------------------------
return new()
--------------------------------------------------